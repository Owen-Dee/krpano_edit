<krpano>

    <style name="hotspot_room"
           url="images/top.png"
           framewidth="96" frameheight="96" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <style name="hotspot_room_left"
           url="images/left_one.png"
           framewidth="48" frameheight="48" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); get(skin_settings.loadscene_blend)); js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <style name="hotspot_room_right"
           url="images/right_one.png"
           framewidth="48" frameheight="48" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <!-- 热点样式 begin -->
    <style name="hotspot_top"
           url="images/top.png"
           framewidth="96" frameheight="96" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <style name="hotspot_left_one"
           url="images/left_one.png"
           framewidth="96" frameheight="96" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <style name="hotspot_left_two"
           url="images/left_two.png"
           framewidth="96" frameheight="96" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <style name="hotspot_right_one"
           url="images/right_one.png"
           framewidth="96" frameheight="96" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <style name="hotspot_right_two"
           url="images/right_two.png"
           framewidth="96" frameheight="96" frame="0" lastframe="8"
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));js(OnHotspotRoomClicked(get(linkedscene))););"
           loadTip="if(skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );add_all_the_time_tooltip()"
           onloaded="add_all_the_time_tooltip()"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />
    <!-- 热点样式 end -->

    <style name="hotspot_material"
           url="images/hotspot_material.png"
           crop="0|0|48|48"
           framewidth="48" frameheight="48" frame="0" lastframe="8"
           onclick="js(OnHotspotMaterialClicked(get(linkedscene)););"
           onover="copy(layer[skin_tooltip].html, tooltip);set(layer[skin_tooltip].visible, true);tween(layer[skin_tooltip].alpha, 1.0, 0.1);asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
    />

    <style name="hotspot_tooltip"
           url="%SWFPATH%/plugins/textfield.swf"
           align="top"
           edge="bottom"
           backgroundcolor="0x000000"
           backgroundalpha="0.5"
           roundedge="calc:9*webvr_setup_scale*webvr_button_scale"
           css="calc:'color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'"
           padding="calc:6*webvr_setup_scale*webvr_button_scale + ' ' + 10*webvr_setup_scale*webvr_button_scale"
    />
    <plugin name="tooltipHotspot" keep="true"
            onclick="alert('dd')"
    />

    <autorotate enabled="false" />

    <action name="add_all_the_time_tooltip">
        txtadd(tooltipname, 'tooltip_', get(name));
        addplugin(get(tooltipname));
        txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
        set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
        set(plugin[get(tooltipname)].align,top);
        set(plugin[get(tooltipname)].edge,bottom);
        set(plugin[get(tooltipname)].x,0);
        set(plugin[get(tooltipname)].y,0);
        set(plugin[get(tooltipname)].width,100);
        set(plugin[get(tooltipname)].autoheight,true);
        set(plugin[get(tooltipname)].background,true);
        set(plugin[get(tooltipname)].backgroundcolor,0x000000);
        set(plugin[get(tooltipname)].roundedge,15);
        set(plugin[get(tooltipname)].backgroundalpha,0.5);
        set(plugin[get(tooltipname)].border,true);
        set(plugin[get(tooltipname)].glow,4);
        set(plugin[get(tooltipname)].glowcolor,0xFFFFFF);
        set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold;
        font-size:30px;z-index: 100;');
        set(plugin[get(tooltipname)].textshadow,1);
        set(plugin[get(tooltipname)].textshadowrange,6.0);
        set(plugin[get(tooltipname)].textshadowangle,90);
        set(plugin[get(tooltipname)].linkedscene,get(linkedscene));
        copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
        if("linkedroom",copy(plugin[get(tooltipname)].html,"linkedroom"));
        set(plugin[get(tooltipname)].onclick, js(alert(get(name))));
    </action>

    <layer name="startpic_container"
           preload="true"
           alpha="1"
           handcursor="true"
           enabled="true"
           children="true"
           visible="true"
           zorder="90"
           type="container"
           maskchildren="true"
           keep="true"
           width="100%"
           height="100%"
           bgcolor="0x000000"
           bgalpha="0.8">
        <layer name="skin_title_logo3"
               zorder="100"
               keep="true"
               x="0"
               y="-80"
               align="center"
               url="360logo.png"
               scale="1"
               alpha="0"
               onloaded="tween(alpha,1.0);tween(layer[skin_title_pr].alpha,1.0);"
               onclick="tween(layer[startpic_container].ox,-2500,1);
delayedcall(1,set(layer[startpic_container].enabled,false);
set(layer[startpic_container].visible,false);
stopdelayedcall(startpic1);stopdelayedcall(startpic2);"
               enabled="false"/>

        <layer name="skin_title_pr"
               background="true"
               backgroundcolor="0x999999"
               roundedge="10"
               backgroundalpha="0"
               border="true"
               bordercolor="0x999999"
               borderalpha="0"
               borderwidth="4.0"
               glow="0"
               glowcolor="0xCCCCCC"
               visible="true"
               keep="true"
               alpha="0"
               onloaded=""
               children="false"
               align="center"
               zorder="100"
               autowidth="auto"
               height="80"
               url="%SWFPATH%/plugins/textfield.swf"
               html="全景漫游"
               css="text-align:center; color:#FFFFFF; font-family:SimHei; font-weight:bold; font-size:30px;"
               x="0"
               y="20"
               onclick="tween(layer[startpic_container].ox,-2500,1);
delayedcall(1,set(layer[startpic_container].enabled,false);
set(layer[startpic_container].visible,false);
stopdelayedcall(startpic1);stopdelayedcall(startpic2);"
               enabled="false"
        />

    </layer>
    <events name="startlogoevents" keep="true"
            onloadcomplete="
ifnot(layer[skin_title_logo3].enabled,
set(layer[skin_title_logo3].enabled,true);
set(layer[skin_title_pr].enabled,true);
delayedcall(startpic1,0.5,tween(layer[startpic_container].ox,-2500,1));
delayedcall(startpic2,0.5,set(layer[startpic_container].enabled,false);set(layer[startpic_container].visible,false);js(onLoadPanoComplete());););"/>

    <!-- 启动画面结束 -->

    <!-- include VR support - http://krpano.com/plugins/webvr/ -->
    <include url="webvr.xml" devices="html5"/>

    <!-- overwrite some settings from the webvr.xml for the skin integration -->
    <plugin name="WebVR" keep="true" devices="html5"
            pluginurl="webvr.js"
            url=""
            multireslock.desktop="true"
            multireslock.mobile.or.tablet="false"
            mobilevr_support="true"
            mobilevr_fake_support="true"
            onavailable="removelayer(webvr_enterbutton); skin_arrange_buttons(); webvr_onavailable();"
            onentervr="skin_showloading(false); webvr_onentervr(); webvr_setup(); skin_reloadscene_webvr();"
            onexitvr="webvr_onexitvr(); webvr_setup(); skin_reloadscene_webvr();"
    />

    <layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile"
           url="rotate_device.png" scale="0.5"
           align="top" edge="center" y="28%"
           autoalpha="true" alpha="0.0"
           enabled="false"
    />

    <events name="webvr_events" keep="true" devices="html5"
            onresize.mobile="webvr_act_as_gyro_in_portrait_mode();"
            onviewchange=""
    />

    <action name="webvr_setup">
        if(webvr.isenabled,
        copy(loadscene_flags_backup, skin_settings.loadscene_flags);
        set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW);
        webvr_act_as_gyro_in_portrait_mode(true);
        if(scene.count GT 1,
        set(hotspot[webvr_prev_scene].visible, true);
        set(hotspot[webvr_next_scene].visible, true);
        set(events[webvr_events].onviewchange, webvr_menu_following());
        );
        ,
        if(loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, loadscene_flags_backup));
        tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
        set(hotspot[webvr_prev_scene].visible, false);
        set(hotspot[webvr_next_scene].visible, false);
        set(events[webvr_events].onviewchange, null);
        );
    </action>

    <action name="webvr_act_as_gyro_in_portrait_mode">
        if(device.mobile AND webvr.isenabled,
        div(aspect, stagewidth, stageheight);
        if(aspect != lastaspect OR '%1' == 'true',
        copy(lastaspect, aspect);
        if(stagewidth GT stageheight,
        <!-- landscape orientation - use stereo rendering and a direct/fast gyro sensor mode -->
        set(display.stereo, true);
        set(webvr.mobilevr_sensor_mode, 3);
        webvr.update();
        tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
        ,
        <!-- portrait orientation - use normal rendering and a smoother/slower gyro sensor mode -->
        set(display.stereo, false);
        set(webvr.mobilevr_sensor_mode, 1);
        webvr.update();
        tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);
        delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); );
        );
        );
        ,
        set(lastaspect, 0);
        );
    </action>

    <!-- VR scene switching hotspots -->
    <style name="webvr_menu_style" depth="800" scale="0.5" distorted="true" ath="0" atv="45" alpha="0.5"/>
    <hotspot name="webvr_prev_scene" keep="true" style="skin_base|webvr_menu_style" crop="0|64|64|64" ox="-64"
             onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(-1);"
             visible="false" devices="html5.and.webgl"/>
    <hotspot name="webvr_next_scene" keep="true" style="skin_base|webvr_menu_style" crop="64|64|64|64" ox="+64"
             onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(+1);"
             visible="false" devices="html5.and.webgl"/>

    <!-- floating/following VR hotspots -->
    <action name="webvr_menu_following" type="Javascript" devices="html5">
        <![CDATA[
		var hs1 = krpano.get("hotspot[webvr_prev_scene]");
		var hs2 = krpano.get("hotspot[webvr_next_scene]");
		if(!hs1.hovering && !hs2.hovering)
		{
			var f = 0.01;	// following speed factor
			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;
			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;
			var dh = h - hsh;
			dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0
			hsh += dh*f;
			var a = Math.abs(v - hsv) / 90.0;
			a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);
			v = v + 55.0 - v*1.5;
			hsv = hsv*(1.0 - f) + v*f;
			hs1.ath = hs2.ath = hsh;
			hs1.atv = hs2.atv = hsv;
			hs1.alpha = hs2.alpha = a;
		}
	]]>
    </action>
    <!-- VR support -->

    <!-- skin events -->
    <events name="skin_events" keep="true"
            onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
            onnewpano="skin_showloading(true); skin_update_scene_infos(); skin_deeplinking_update_url();"
            onremovepano="skin_showloading(true);"
            onloadcomplete="skin_showloading(false);"
            onidle="skin_deeplinking_update_url();"
            onresize="skin_onresize();"
            onenterfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '64|576|64|64');"
            onexitfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '0|576|64|64');"
            onkeydown="skin_keydown_event();"
    />


    <!-- skin actions -->
    <action name="skin_startup">

        <!-- apply skin settings on startup -->
        if(skin_settings.thumbs,
        if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened');
        set(layer[skin_thumbs_container].visible,true); );
        copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
        if(skin_settings.thumbs_onhoverscrolling AND device.mouse,
        set(layer[skin_thumbs].draggable, false);
        set(layer[skin_thumbs].onhover_autoscrolling, true);
        );
        );

        if(skin_settings.gyro AND !device.desktop AND device.html5,
        copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);
        );

        if(skin_settings.webvr AND device.html5 AND device.webgl,
        copy(plugin[WebVR].url, plugin[WebVR].pluginurl);
        );

        if(skin_settings.maps == true,
        set(layer[skin_btn_map].visible, true);

        if(device.flash,
        copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
        set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.swf');
        ,
        if(skin_settings.maps_type == 'bing',
        copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
        set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.js');
        ,
        set(layer[skin_map].url, '%SWFPATH%/plugins/googlemaps.js');
        );
        );
        );

        if(skin_settings.littleplanetintro AND (device.webgl OR device.flash),
        skin_setup_littleplanetintro();
        );

        skin_addthumbs();
        skin_onresize();
        skin_updatescroll();

        set(layer[skin_layer].visible, true);

    </action>


    <action name="skin_showloading">
        if(display.stereo == true,
        set(layer[skin_loadingtext].visible, false);
        ,
        set(layer[skin_loadingtext].visible, %1);
        );
    </action>


    <action name="skin_hidetooltips">
        set(layer[skin_tooltip].alpha,0.0);
        set(layer[skin_tooltip].visible,false);
    </action>


    <action name="skin_buttonglow">
        if('%1' !== 'null',
        set(strength,0.7);
        if(%2 != null, set(strength,%2));
        set(layer[skin_buttonglow].parent, %1);
        set(layer[skin_buttonglow].visible, true);
        tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
        ,
        tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default,
        set(layer[skin_buttonglow].parent, null);
        set(layer[skin_buttonglow].visible, false);
        );
        );
    </action>


    <action name="skin_calc_opened_closed">
        set(layer[get(name)].y_opened, get(layer[get(name)].y));
        set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset -
        skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));
    </action>


    <action name="skin_hideskin">
        if(layer[skin_map].state != 'closed', skin_showmap(false); wait(0.40); );
        if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );

        set(hidetime, calc('%1' == 'instant' ? 0.0 : 0.5));
        tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window ].y_closed), get(hidetime));
        tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_closed), get(hidetime));
        tween(layer[skin_control_bar].y, get(layer[skin_control_bar ].y_closed), get(hidetime));

        tween(layer[skin_btn_prev_fs].x, 0, get(hidetime));
        tween(layer[skin_btn_next_fs].x, 0, get(hidetime));

        if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );

        stopdelayedcall(skin_btn_show_alpha);
        set(layer[skin_btn_show].visible, true);
        delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );
    </action>


    <action name="skin_showskin">
        tween(layer[skin_scroll_window ].y, get(layer[skin_scroll_window ].y_opened));
        tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_opened));
        tween(layer[skin_control_bar ].y, get(layer[skin_control_bar ].y_opened));

        tween(layer[skin_btn_prev_fs].x, -50);
        tween(layer[skin_btn_next_fs].x, -50);

        if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );

        stopdelayedcall(skin_btn_show_alpha);
        set(layer[skin_btn_show].visible, false);
        delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );
    </action>


    <action name="skin_showthumbs">
        if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
        mul(mh, layer[skin_scroll_layer].pixelheight, -1);
        if(show,
        set(layer[skin_thumbs].state, 'opened');
        tween(layer[skin_thumbs].alpha, 1.0, 0.25);
        add(mh, layer[skin_thumbs].height);
        add(mh, layer[skin_scroll_layer].y_offset);
        tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
        set(layer[skin_thumbs_container].visible, true);
        tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
        tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
        ,
        set(layer[skin_thumbs].state, 'closed');
        tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
        add(mh, layer[skin_scroll_layer].y_offset);
        tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible,
        false););
        );
    </action>


    <action name="skin_showmap">
        if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
        mul(mh, layer[skin_scroll_layer].pixelheight, -1);
        if(show,
        tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
        set(layer[skin_map].visible, true);
        tween(layer[skin_map].alpha, 1.0, 0.25);
        set(layer[skin_map].state, 'opened');
        sub(hh,area.pixelheight,skin_settings.controlbar_offset);
        sub(hh,layer[skin_control_bar].height);
        sub(hh,32);
        add(mh,hh);
        sub(hh,skin_settings.controlbar_overlap);
        copy(layer[skin_map].height, hh);
        tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
        ,
        if(layer[skin_map].state != 'closed',
        set(layer[skin_map].state, 'closed');
        add(mh, layer[skin_scroll_layer].y_offset);
        tween(layer[skin_map].alpha, 0.0, 0.5, easeOutQuint);
        tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
        );
        );
    </action>


    <action name="skin_keydown_event">
        if(keycode == 33, skin_nextscene_loop(-1) );                <!-- Page Up   - previous scene -->
        if(keycode == 34, skin_nextscene_loop(+1) );                <!-- Page Dowm - next scene -->
        if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );    <!-- End       - last scene -->
        if(keycode == 36, skin_gotoscene(0) );                    <!-- Home/Pos1 - first scene -->
    </action>


    <action name="skin_deeplinking_update_url">
        if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false),
        copy(adr, browser.location);
        indexoftxt(qi, get(adr), '?');
        if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
        copy(si, scene[get(xml.scene)].index);
        copy(h, view.hlookat);
        copy(v, view.vlookat);
        copy(f, view.fov);
        copy(d, view.distortion);
        copy(a, view.architectural);
        clamp(d, 0.0, 1.0);
        clamp(a, 0.0, 1.0);
        set(pp, calc(f LT 10 ? 6 : 2));
        roundval(h, get(pp));
        roundval(v, get(pp));
        roundval(f, get(pp));
        roundval(d, 2);
        roundval(a, 1);
        set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
        js( history.replaceState(null, document.title, get(adr)); );
        );
    </action>


    <!-- reload the scene when there is a special image for VR -->
    <action name="skin_reloadscene_webvr">
        delayedcall(0.1,
        if(scene[get(xml.scene)].havevrimage,
        loadscene(get(xml.scene), null, MERGE|KEEPVIEW|KEEPMOVING|KEEPHOTSPOTS|NOPREVIEW, BLEND(0.5));
        );
        );
    </action>


    <!-- videopano support - http://krpano.com/plugins/videoplayer/ -->
    <action name="skin_video_addcontrols">
        set(events[skin_events].onclick, skin_video_clickevent() );

        set(plugin[video].onvideoready, skin_video_updatestate() );
        set(plugin[video].onvideoplay, skin_video_updatestate() );
        set(plugin[video].onvideopaused, skin_video_updatestate() );
        set(plugin[video].onvideocomplete, skin_video_updatestate() );

        if(plugin[video].ispaused AND plugin[video].pausedonstart,
        set(layer[skin_video_playpause].state, 'visible');
        set(layer[skin_video_playpause].enabled, true);
        tween(layer[skin_video_playpause].alpha, 1.0);
        );

        delayedcall(skin_video_delayedvisible, 0.25, set(layer[skin_video_controls].visible, true) );

        skin_video_updateseekbarwidth();
        set(layer[skin_video_seekpos].x,0);
        set(layer[skin_video_loadbar].width,0);

        setinterval(skin_video_seek_updates, 0.5, skin_video_updatetime() );
    </action>

    <action name="skin_video_removecontrols">
        stopdelayedcall(skin_video_delayedvisible);

        set(events[skin_events].onclick, null);

        set(layer[skin_video_playpause].alpha, 0.0);
        set(layer[skin_video_controls].visible, false);

        clearinterval(skin_video_seek_updates);
    </action>

    <action name="skin_video_updatetime">
        copy(t1, plugin[video].time);
        copy(t2, plugin[video].totaltime);
        if(%1 !== null, calc(t1, %1 * t2); );
        div(t1_min, t1, 60);
        mod(t1_sec, t1, 60);
        Math.floor(t1_min);
        Math.floor(t1_sec);
        div(t2_min, t2, 60);
        mod(t2_sec, t2, 60);
        Math.floor(t2_min);
        Math.floor(t2_sec);
        calc(layer[skin_video_time].html, t1_min + ':' + (t1_sec LT 10 ? '0' : '') + t1_sec + ' / ' + t2_min + ':' +
        (t2_sec LT 10 ? '0' : '') + t2_sec);
        calc(layer[skin_video_seekpos].x, (t1 / t2 * 100) + '%');
        calc(layer[skin_video_loadbar].width, (plugin[video].loadedbytes / plugin[video].totalbytes * 100) + '%');
    </action>

    <action name="skin_video_updateseekbarwidth">
        if(skin_settings.title,
        calc(layer[skin_video_seekbar_container].width, 0 - (32 + layer[skin_title].pixelwidth +
        layer[skin_video_time].pixelwidth));
        calc(layer[skin_video_seekbar_container].x, layer[skin_title].pixelwidth + 16);
        ,
        calc(layer[skin_video_seekbar_container].width, 0 - (24 + layer[skin_video_time].pixelwidth));
        set(layer[skin_video_seekbar_container].x, 8);
        );
    </action>

    <action name="skin_video_ondownseeking">
        asyncloop(pressed,
        screentolayer(skin_video_seekbar, mouse.stagex,mouse.stagey, lx,ly);
        calc(seekpos, lx / layer[skin_video_seekbar].pixelwidth);
        clamp(seekpos, 0.0, 1.0);
        skin_video_updatetime(seekpos);
        ,
        plugin[video].seek(calc((seekpos * 100) + '%'));
        );
    </action>

    <layer name="skin_video_playpause" keep="true"
           style="skin_base|skin_glow" crop="0|640|64|64" scale="0.75"
           align="center" alpha="0.0" autoalpha="true"
           state="hidden"
           onclick="skin_video_playpause_click();"
    />

    <action name="skin_video_updatestate">
        calc(layer[skin_video_playpause].crop, plugin[video].ispaused ? '0|640|64|64' : '64|640|64|64');
        if(plugin[video].iscomplete,
        set(layer[skin_video_playpause].state, 'visible');
        tween(layer[skin_video_playpause].alpha, 1.0);
        );
    </action>

    <action name="skin_video_playpause_click">
        if(plugin[video].ispaused,
        plugin[video].play();
        set(layer[skin_video_playpause].state, 'hidden');
        tween(layer[skin_video_playpause].alpha, 0.0);
        ,
        plugin[video].pause();
        set(layer[skin_video_playpause].state, 'visible');
        tween(layer[skin_video_playpause].alpha, 1.0);
        delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden');
        tween(layer[skin_video_playpause].alpha, 0.0); );
        );
    </action>

    <action name="skin_video_clickevent">
        stopdelayedcall(autohide_pp);

        switch(layer[skin_video_playpause].state, 'visible', 'hidden');

        if(layer[skin_video_playpause].state == 'hidden',
        tween(layer[skin_video_playpause].alpha, 0.0);
        ,
        tween(layer[skin_video_playpause].alpha, 1.0);
        delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden');
        tween(layer[skin_video_playpause].alpha, 0.0); );
        );
    </action>


    <action name="skin_changecontrolmode">
        switch(control.mouse, moveto, drag);
        switch(control.touch, moveto, drag);
    </action>

    <action name="skin_view_look_straight">
        if(view.vlookat LT -80 OR view.vlookat GT +80,
        tween(view.vlookat, 0.0, 1.0, easeInOutSine);
        tween(view.fov, 100, distance(150,0.8));
        );
    </action>

    <action name="skin_view_normal">
        skin_view_look_straight();
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini, 0.0, distance(1.0,0.5));
        tween(view.distortion, 0.0, distance(1.0,0.5));
    </action>

    <action name="skin_view_fisheye">
        skin_view_look_straight();
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini, 0.0, distance(1.0,0.5));
        tween(view.distortion, 0.35, distance(1.0,0.5));
    </action>

    <action name="skin_view_architectural">
        skin_view_look_straight();
        tween(view.architectural, 1.0, distance(1.0,0.5));
        tween(view.pannini, 0.0, distance(1.0,0.5));
        tween(view.distortion, 0.0, distance(1.0,0.5));
    </action>

    <action name="skin_view_stereographic">
        skin_view_look_straight();
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini, 0.0, distance(1.0,0.5));
        tween(view.distortion, 1.0, distance(1.0,0.8));
    </action>

    <action name="skin_view_pannini">
        skin_view_look_straight();
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini, 1.0, distance(1.0,0.8));
        if(view.distortion LT 0.1,
        tween(view.distortion, 1.0, distance(1.0,0.8));
        );
    </action>

    <action name="skin_view_littleplanet">
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini, 0.0, distance(1.0,0.5));
        tween(view.distortion, 1.0, distance(1.0,0.8));
        tween(view.fov, 150, distance(150,0.8));
        tween(view.vlookat, 90, distance(100,0.8));
        add(new_hlookat, view.hlookat, 123.0);
        tween(view.hlookat, get(new_hlookat), distance(100,0.8));
    </action>
    <autorotate enabled="true" waittime="1.0" speed="5.0" horizon="0.0" tofov="120.0"/>
    <layer name="skin_tooltip" keep="true"
           url="%SWFPATH%/plugins/textfield.swf"
           parent="STAGE"
           visible="true" alpha="1" enabled="false"
           align="lefttop" edge="bottom" ox="-12.982" oy="-88.184" width="200" autoheight="true"
           background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
           border="false" bordercolor="0x000000" borderalpha="1.0" borderwidth="1.0" roundedge="0"
           shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
           textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
           css="text-align:center; color:#FFFFFF; font-family:Microsoft YaHei; font-weight:bold; font-size:16px;"
           html=""
    />
    <action name="skin_hidetooltips">
        set(layer[skin_tooltip].alpha,0.0);
        set(layer[skin_tooltip].visible,false);
    </action>

    <action name="startup">
        if(startscene === null, copy(startscene,scene[0].name));
        loadscene(get(startscene), null, MERGE);

        if(startactions !== null, startactions() );
        set(layer[skin_title_pr].html,'...加载中');
    </action>

    <!-- =================new================== -->
    <action name="draghotspot">
      spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery, 'l');
      sub(drag_adjustx, mouse.stagex, hotspotcenterx);
      sub(drag_adjusty, mouse.stagey, hotspotcentery);
      asyncloop(pressed,
        sub(dx, mouse.stagex, drag_adjustx);
        sub(dy, mouse.stagey, drag_adjusty);
        screentosphere(dx, dy, ath, atv);
        roundval(ath, 3);
        roundval(atv, 3);
        js(window.getHotspot(get(ath), get(atv)));
      );
    </action>

    <action name="dragmouseup">
      jscall(window.saveHotspot());
   </action>

    <action name="add_all_the_time_tooltip_for_VR">
     txtadd(tooltipname, 'vrtooltip_', get(name));
     addhotspot(get(tooltipname)); 
     set(hotspot[get(tooltipname)],
      type=text,
      edge=get(hotspot[get(name)].edge),
      distorted=get(hotspot[get(name)].distorted),
      ath=get(hotspot[get(name)].ath),
      atv=get(hotspot[get(name)].atv),
      oy=-50,
      ox=0,
      vcenter=true,
      padding=10,
      mipmapping=true,
      oversampling=2,
      bg=true,
      bgcolor=0x000000,
      bgroundedge=5,
      bgalpha=0.65,
      bgborder=0,
      bgshadow='0 0 0 0x000000 0',
      css=calc(device.mobile ? 'text-align:center; color:#FFFFFF; font-family:MicrosoftYahei; font-weight:bold; font-size:24px;':'text-align:left; color:#FFFFFF; font-family:MicrosoftYahei; font-size:24px;'),
      txtshadow='0 0 0 0x000000 0';
      enabled=true,
          );
           txtadd(hotspot[get(tooltipname)].onclick,'callwith(hotspot[',get(name),'],onclick)');  
     if(text == '' OR text === null,
   
       copy(hotspot[get(tooltipname)].html,scene[get(linkedscene)].title),
       copy(hotspot[get(tooltipname)].html,text);
   
     ); 
     if(lp_running == false,
      set(hotspot[get(tooltipname)].visible,true); 
      ,   
      if(!webvr.isenabled,
        if(lp_running == true,
        set(hotspot[get(tooltipname)].visible,false); 
        set(hotspot[get(tooltipname)].mark2,true);
         );
        );
      );
     if(hotspot[get(name)].normal == false, 
   
      set(hotspot[get(tooltipname)].normal,false);
      set(hotspot[get(tooltipname)].onloaded,
        if(webvr.isenabled,
          set(visible,false);
          , 
          if(lp_running == false OR lp_running == null OR lp_running === null,  
            set(visible,true);
            );
          );
           );
   
      );
    </action>

      <!-- skin_hotspotstyle - style for the hotspots -->
    <style name="skin_hotspotstyle" url="vtourskin_hotspot.png" scale="0.5" edge="top" distorted="true"
           tooltip=""
           linkedscene=""
           linkedscene_lookat=""
           onclick="skin_hotspotstyle_click();"
           onover="tween(scale,0.55);"
           onout="tween(scale,0.5);"
           onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
           />

    <action name="skin_hotspotstyle_click" scope="local">
      if(caller.linkedscene,
        copy(hs_linkedscene, caller.linkedscene);
        if(caller.linkedscene_lookat, txtsplit(caller.linkedscene_lookat, ',', hs_lookat_h, hs_lookat_v, hs_lookat_fov); );
        set(caller.enabled, false);
        skin_hidetooltips();
        tween(caller.depth|caller.alpha|caller.oy|caller.rx, 4000|0.0|-50|-60, 0.5, default,
          skin_loadscene(get(hs_linkedscene), get(skin_settings.loadscene_blend));
          if(hs_lookat_h !== null, skin_lookat(get(hs_lookat_h), get(hs_lookat_v), get(hs_lookat_fov)); );
          skin_updatescroll();
        );
      );
    </action>
</krpano>
